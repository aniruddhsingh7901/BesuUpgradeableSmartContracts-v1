import { expect } from "chai";
import { DeployHelper } from "../../helpers/DeployHelper";
import { ethers } from "hardhat";
import { packValidatorParams } from "../utils/validator-pack-utils";
import { calculateQueryHashV2 } from "../utils/query-hash-utils";
import { fail } from "assert";

const proofJson = {
  id: 200,
  circuitId: "credentialAtomicQuerySigV2OnChain",
  proof: {
    pi_a: [
      "10018577728702247975399473602211906480932891894868002055873796640855583313003",
      "18953995678234698157261685242897525770669954646504033559799448983781745394134",
      "1",
    ],
    pi_b: [
      [
        "2697853189299938307043959505739534786459982048563924763079651804908181765971",
        "4867376911073334134430819477999608188892793468434637497139067777569683260735",
      ],
      [
        "12577180560778448204823534808869512464076610117496647508454695141410881854776",
        "7983627824318951238093912839505578484551838543256395884553047182544579619929",
      ],
      ["1", "0"],
    ],
    pi_c: [
      "17270241110993788405197658854911014779750009743278590468560541590292541027936",
      "14906839261883730576069776732565089677931831950465658765725162864730650512323",
      "1",
    ],
    protocol: "groth16",
    curve: "bn128",
  },
  pub_signals: [
    "1",
    "20188337264468129678665652512059489509465837655417453276670192322354614785",
    "15045271939084694661437431358729281571840804299863053791890179002991342242959",
    "19466226773369473875796792054111725835240080766652478608862134658623670787124",
    "200",
    "583091486781463398742321306787801699791102451699",
    "374835406848933347171860844865480202594561448145980149894469099758930794446",
    "24812938394244020701742976182597109106680204567536382687119178571886170625",
    "1",
    "16878980345690856507275800554253077288348233804241607458613880467487951766795",
    "1711026752",
  ],
  response:
    "0x01000058519fa383d66ccab979d0040859560591837d46b7ef2d11283c32f53256fb2207af5dca576dd93c5de025024ea310a7bafeffa1f0b50e04f9d2ffffdd98ce5e000000012b0100000000010005010000011e0000000930783264316539363604134b1be34911e39a8397ec6289782989729807a4000000247c1a66de00d42639f73e54e7c0263c3fd78890f806e5741c849fd56205202e71ada297ce134b1be34911e39a8397ec6289782989729807a40000004453c87312000e0b2b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f23912012b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f23989628f1c34134b1be34911e39a8397ec6289782989729807a4000000240b8a295a000e0b2b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f2391201134b1be34911e39a8397ec6289782989729807a400000024b4bdea55000e0b2b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f239120101000501000002e10000000002d1e966c669eb2145c8e64d380edc902bc450a4540c614f35da6499ed7e96813fa21f040006142b762bdfc004000000c000d42639f73e54e7c0263c3fd78890f806e5741c849fd56205202e71ada297ce00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065fc323b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d1e9600000000000000000000000000000000000000000000000000000000000000000000000e0000e0b2b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f23912012b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f23989628f1c3425512a1127db0d82e959ca0eaa949fbd7a30e5ff79d1c21b2aef5b063359450b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065fc323b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d1e960000000200000000000000000000000000000000000000000000000000000000000000001000000e0000e0b2b097e70c8da5f3eb710fde9e173be3d8b21854955a1e7a871f239120125512a1127db0d82e959ca0eaa949fbd7a30e5ff79d1c21b2aef5b063359450b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065fc323b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d1e9600000000000000000000000000000000000000000000000000000000000000000",
  signatures: [
    {
      r: "0x4a393e4f416fcaf38184a03524f48b6d1c5cff986541669e14759302aa25a365",
      s: "0x3588aff0909e35f237d7227689a3854f1160ccc34f7492f051e7c7594e42f7a8",
      v: "0x1c",
      guardianIndex: "0x00",
    },
  ],
};

export function prepareInputs(json: any): any {
  const { proof, pub_signals } = json;
  const { pi_a, pi_b, pi_c } = proof;
  const [[p1, p2], [p3, p4]] = pi_b;
  const preparedProof = {
    pi_a: pi_a.slice(0, 2),
    pi_b: [
      [p2, p1],
      [p4, p3],
    ],
    pi_c: pi_c.slice(0, 2),
  };
  const { response } = json;
  const { signatures } = json;

  return { inputs: pub_signals, ...preparedProof, response, signatures };
}

const query = {
  schema: ethers.BigNumber.from("74977327600848231385663280181476307657"),
  claimPathKey: ethers.BigNumber.from(
    "20376033832371109177683048456014525905119173674985843915445634726167450989630"
  ),
  operator: ethers.BigNumber.from(2),
  slotIndex: ethers.BigNumber.from(0),
  value: [
    ethers.BigNumber.from("20020101"),
    ...new Array(63).fill("0").map((x) => ethers.BigNumber.from(x)),
  ],
  queryHash: ethers.BigNumber.from(
    "15045271939084694661437431358729281571840804299863053791890179002991342242959"
  ),
  circuitIds: ["credentialAtomicQuerySigV2OnChain"],
  claimPathNotExists: 0,
};

describe.only("Cross chain validation", function () {
  let validatorV2Sig;
  let zkpVerifier;
  beforeEach(async () => {
    const deployHelper = await DeployHelper.initialize(null, true);

    const [owner] = await ethers.getSigners();
    zkpVerifier = await deployHelper.deployZKPVerifier(owner);

    const wormholeCoreContractAddress = "0x706abc4E45D419950511e474C7B9Ed348A4a716c"; // ethreum goerli
    // const wormholeCoreContractAddress = "0x6b9C8671cdDC8dEab9c719bB87cBd3e782bA6a35"; // opt sepolia
    const { validator } = await deployHelper.deployValidatorContracts(
      "VerifierSigWrapper",
      "CredentialAtomicQuerySigV2Validator",
      wormholeCoreContractAddress
    );
    validatorV2Sig = validator;
  });

  it("onchain verification", async () => {
    await zkpVerifier.setZKPRequest(200, {
      metadata: "metadata",
      validator: validatorV2Sig.address,
      data: packValidatorParams(query),
    });

    const { inputs, pi_a, pi_b, pi_c, response, signatures } = prepareInputs(proofJson);

    console.log("response", response);
    console.log("signatures", signatures);
    try {
      await zkpVerifier.submitZKPResponse(200, inputs, pi_a, pi_b, pi_c, response, signatures);
    } catch (error) {
      fail("Expected function not to throw, but it threw");
    }
  });

  // it.only("calculate query hash", async () => {
  //   const h = calculateQueryHashV2(
  //     [20020101n],
  //     "74977327600848231385663280181476307657",
  //     0,
  //     2,
  //     "20376033832371109177683048456014525905119173674985843915445634726167450989630",
  //     0
  //   );
  //   console.log(h.toString());
  // });
});
