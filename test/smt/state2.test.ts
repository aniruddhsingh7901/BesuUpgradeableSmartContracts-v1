const {expect} = require("chai");
const {ethers} = require("hardhat");
const bigInt = require("big-integer");

describe("State", () => {
    let verifier;
    let state;

    before(async () => {
        const Verifier = await ethers.getContractFactory("Verifier");
        verifier = await Verifier.deploy();
        await verifier.deployed();

        const State = await ethers.getContractFactory("State");
        state = await State.deploy(verifier.address);
        await state.deployed();
    });

    // Note: smart contract params (including proofs) were generated by the publisher server

    it("Positive: initial state publishing", async () => {
        // const params = {
        //     "id": "379949150130214723420589610911161895495647789006649785264738141299135414272",
        //     "oldState": "18656147546666944484453899241916469544090258810192803949522794490493271005313",
        //     "newState": "8061408109549794622894897529509400209321866093562736009325703847306244896707",
        //     "isOldStateGenesis": "1",
        //     "a": [
        //         "19199334096124144306969971688148091835319114950238470891114976963310681550012",
        //         "16953648910881355009244840075322278183610445861846108793426831933915050519721"
        //     ],
        //     "b": [
        //         [
        //             "4930721897955833322888673907914572125539786148219289120574830971494239836096",
        //             "4382117334763842965158094114737845444247143267717819507493385143245445495297"
        //         ],
        //         [
        //             "13351638347917209617460516263354403601280022324390787709940682593789065480379",
        //             "14158415251328701863600612996254438442075757706850842003103559362409568601777"
        //         ]
        //     ],
        //     "c": [
        //         "11087685014315916286077991711686810841996296866673689745960218136068063261961",
        //         "1101952250596507940009480237111758916141356508680126512170143672832985442917"
        //     ]
        // }

        const params = {
            "id": "379949150130214723420589610911161895495647789006649785264738141299135414272",
            "oldState": "18656147546666944484453899241916469544090258810192803949522794490493271005313",
            "newState": "8061408109549794622894897529509400209321866093562736009325703847306244896707",
            "isOldStateGenesis": "1",
            "a": [
                "364278077783368594809975318384735299053546352250421518715866725844344558846",
                "6469914705719363335943141693742415339105534511539230470786206294708507328443",
            ],
            "b": [
                [
                    "7622893075043495283512423296130112497704407649124937282616097686337554146791",
                    "8212246732177533649516169171983751395207672672948683258659062720632412156904"
                ],
                [
                    "8380703278533655208736517410834534841297080393294758377365559500626906471420",
                    "16855628824096260697610431124113817576717565783930016138073602102170786096107"
                ],
            ],
            "c": [
                "9325570496836956548672816584411772232757481174272632280946682956713130642517",
                "2359813835154142834502044245623756906373328122004701601396997996625733922972",
            ]
        }

        await state.transitState(params.id, params.oldState, params.newState, params.isOldStateGenesis, params.a, params.b, params.c);
        const res0 = await state.getState(params.id);
        expect(res0.toString()).to.be.equal(bigInt(params.newState).toString());
        // const transitionInfoNew = await state.getTransitionInfo(params.newState);
        // const transitionInfoOld = await state.getTransitionInfo(params.oldState);

        const params2 = {
            "id": "353460210857755347550068766781499278289955347108923623334270205442532376576",
            "oldState": "18038855432424775233659896904370825175764119936950028950189276486279006981491",
            "newState": "8061408109549794622894897529509400209321866093562736009325703847306244896707",
            "isOldStateGenesis": "1",
            "a": [
                "3860515867194266272620774311618851488153832110570540223013001996881008282174",
                "4703306317210913013416184966755568035750031779105030483925720684069580157908",
            ],
            "b": [
                [
                    "20153757965601893788298676107737380337553668522222206778131970112043460798726",
                    "9120562841649383702509888925750886052950612022671219629099152486792645095902"
                ],
                [
                    "16970907128644347127502503864223769587261796661332839020934485330952307790244",
                    "3872284897966525642152074003928314467642766589318703970062757869519969901665"
                ],
            ],
            "c": [
                "1476107908968977562334566028647328870142908029171640023520935502983035760404",
                "17281048751807607035602124638778323986662848432166885143004744648464959985221",
            ]
        }

        await state.transitState(params2.id, params2.oldState, params2.newState, params2.isOldStateGenesis, params2.a, params2.b, params2.c);
        const res1 = await state.getState(params.id);
        expect(res1.toString()).to.be.equal(bigInt(params.newState).toString());

        const x2 = await state.getIdentityStates(0);
        console.log(x2);

    });

});
