import { expect } from "chai";
import { DeployHelper } from "../../helpers/DeployHelper";
import hre, { ethers } from "hardhat";
import { packValidatorParams } from "../utils/validator-pack-utils";
import { prepareInputs } from "../utils/state-utils";
import { Block } from "ethers";
import { calculateQueryHashV2 } from "../utils/query-hash-utils";
import { impersonateAccount } from "@nomicfoundation/hardhat-network-helpers";

describe("Cross-chain verification", function () {
  let verifier: any, validator: any;
  let signer;
  let signerAddress: string;
  let deployHelper: DeployHelper;

  const requestId = 4;
  const schemaClaimPathKey =
    "20376033832371109177683048456014525905119173674985843915445634726167450989630";
  const schemaBigInt = "74977327600848231385663280181476307657";

  const Operators = {
    NOOP: 0, // No operation, skip query verification in circuit
    EQ: 1, // equal
    LT: 2, // less than
    GT: 3, // greater than
    IN: 4, // in
    NIN: 5, // not in
    NE: 6, // not equal
  };

  const query: any = {
    requestId,
    schema: schemaBigInt,
    claimPathKey: schemaClaimPathKey,
    operator: Operators.LT,
    slotIndex: 0,
    value: [20020101, ...new Array(63).fill(0)], // for operators 1-3 only first value matters
    circuitIds: ["credentialAtomicQuerySigV2OnChain"],
    skipClaimRevocationCheck: false,
    claimPathNotExists: 0,
  };

  query.queryHash = calculateQueryHashV2(
    query.value,
    query.schema,
    query.slotIndex,
    query.operator,
    query.claimPathKey,
    query.claimPathNotExists,
  ).toString();

  const proofJson = require("../validators/sig/data/valid_sig_user_genesis.json");

  beforeEach(async () => {
    [signer] = await ethers.getSigners();
    signerAddress = await signer.getAddress();

    // ##################### Deploy verifiers #####################

    const domainName = "StateInfo";
    const signatureVersion = "1";
    const chainId = 0;
    const verifyingContract = ethers.ZeroAddress;

    const opv = await ethers.deployContract("OracleProofValidator", [domainName, signatureVersion]);
    const state = await ethers.deployContract("StateCrossChain", [await opv.getAddress()]);

    deployHelper = await DeployHelper.initialize(null, true);
    verifier = await deployHelper.deployUniversalVerifier(signer, await state.getAddress());

    // ##################### Deploy verifiers #####################

    ({ validator } = await deployHelper.deployValidatorContracts(
      "VerifierSigWrapper",
      "CredentialAtomicQuerySigV2Validator",
      await state.getAddress(),
    ));

    await verifier.addValidatorToWhitelist(validator);
  });

  it("submitZKPResponse", async () => {
    const data = packValidatorParams(query);

    await verifier.setZKPRequest(requestId, {
      metadata: "metadata",
      validator: await validator.getAddress(),
      data: data,
    });

    const tenYears = 60 * 60 * 24 * 365 * 10;
    validator.setGISTRootExpirationTimeout(tenYears); // 1 year
    validator.setProofExpirationTimeout(tenYears); // 1 year

    // TODO the account in the hardhat config is expected to be 0xe44943f7d2fe1efa0653b14c45bd257b84fef94d
    // consider better configuration
    const tx = await verifier.submitZKPResponseV2(
      requestId,
      "0x00000000000000000000000000000000000000000000000000000000000001200c44028cb50c482b459e23838a4aa90afd8eff9e6a9984879ec7fab82cd706a71cb01c95afc3fc89f8dc067b43c9343798ba095e6bced0d933b658e5101cb0cd1fcc86d9926fe3c36a76d4358b52e17feeabcb9b92fa744f3f0194c289af9005025e392a604a1d7e300d6515b40fb44bb8c65f08a4b76506b330067b4179d0d6169b975d16c685de161f33681e831134176f84b959c3ef4649544c8cba48aeb213b6e4d9ed8bf185ef2400f1ff0ce60b5dd60a2bce3aa7bbf4e1ed3d887ba73d19a8db4f62ba5477c41e758315db7fa96285a060d136d171999bcd860a3e83aa1288c06f0dbc930d5a10e876853e390c0672a16d566d72ad1a0f6c27f497ae5a000000000000000000000000000000000000000000000000000000000000000b0000000000000000000000000000000000000000000000000000000000000001000e54027f41a1961526b608019ce250b2cd7afae0e6f2fdf2439b314404a1012143527826f525f196d17fd8eaf64ef1818c6ab5c4f8c054161053c1afb7cc8f25dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea38333937b00000000000000000000000000000000000000000000000000000000000000040000000000000000000000004df9fe847b25bd454cb15306fa1efed2f74349e40000000000000000000000000000000000000000000000000000000000000000000d8025dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea201000000000000000000000000000000000000000000000000000000000000000125dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea38333937b0000000000000000000000000000000000000000000000000000000066bb4760",
      "0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000010676c6f62616c537461746550726f6f660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000066bb4766000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000041a27b6cbcf78d3618ad68b1eb86ad5517c60778651799174a28bb1eed644df2407e2f2c433c41ea5c6a2f7ebb82c0f45b18caf4845469bfdf2e9bfb36dac44c5b1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a737461746550726f6f660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000066bb4764000d8025dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea20125dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea38333937b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000004117a1c3e8d2c53e2e723d03d2fa74f626955ebb4715305a077c805327b5ecf74155c41d2c969ed419ef81cdff64a409622cb3caf204781c677791a51e2adfb69b1b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a737461746550726f6f660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb922660000000000000000000000000000000000000000000000000000000066bb4765000d8025dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea20125dd092801bbc04b50b3dd4f16134ae8f97aabbdc07dd4740e2dbea38333937b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000041476073c3e9568e7ea006d4c2547224fc45204a87ef92b3df49702c8f1462b91a1dae3ca145fcb92df36875f2b78d5d6874b987d444a02a545ff4aba7f1b742b61b00000000000000000000000000000000000000000000000000000000000000",
      "0x",
    );
    const txRes = await tx.wait();
    const filter = verifier.filters.ZKPResponseSubmitted;

    const events = await verifier.queryFilter(filter, -1);
    expect(events[0].eventName).to.be.equal("ZKPResponseSubmitted");
    expect(events[0].args.requestId).to.be.equal(requestId);
    expect(events[0].args.caller).to.be.equal(signerAddress);

    const { timestamp: txResTimestamp } = (await ethers.provider.getBlock(
      txRes.blockNumber,
    )) as Block;

    const status = await verifier.getProofStatus(signerAddress, requestId);
    expect(status.isVerified).to.be.true;
    expect(status.validatorVersion).to.be.equal("2.0.4");
    expect(status.blockNumber).to.be.equal(txRes.blockNumber);
    expect(status.blockTimestamp).to.be.equal(txResTimestamp);
  });
});
