// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.27;

import {IState} from "./IState.sol";

/**
 * @dev IRequestValidator. Interface for verification of request query data.
 */
interface IRequestValidator {
    /**
     * @dev OutputParam. Information about output params from verification. Used in verify function.
     * @param name Name of the output param
     * @param value Value of the output param
     */
    struct OutputParam {
        string name;
        uint256 value;
    }

    /**
     * @dev Get version of the contract
     */
    function version() external view returns (string memory);

    /**
     * @dev Verify the proof with the supported method informed in the request query data
     * packed as bytes and that the proof was generated by the sender.
     * @param proof Proof packed as bytes to verify.
     * @param data Request query data of the credential to verify.
     * @param sender Sender of the proof.
     * @param state State contract to get identities and gist states to check.
     * @return Array of output params as result.
     */
    function verify(
        bytes calldata proof,
        bytes calldata data,
        address sender,
        IState state
    ) external returns (IRequestValidator.OutputParam[] memory);

    /**
     * @dev Get supported methods ids.
     * @return ids Array of methods ids supported.
     */
    function getSupportedMethodsIds() external view returns (string[] memory ids);
}
